#!/usr/bin/env ruby

require "optparse"
require_relative "lib/main"
require_relative "lib/argv_errors"

opts = {}
file = nil

parser = OptionParser.new
parser.banner = "\e[1mUsage:\e[0m mdr MARKDOWN_FILE_PATH [options]"
parser.separator ""
parser.separator "\e[1mOptions:\e[0m"

[
  ["-w", "--width=COLS", Integer, "Max output width"],
  ["-a", "--align=DIR", %w[left right center], "Align output \e[1m(use with --width)\e[0m", "DIR can be left, right or center"],
  ["-t", "--mtop=LINES", Integer, "Top margin (empty lines before output)"],
  ["-b", "--mbottom=LINES", Integer, "Bottom margin (empty lines after output)"],
  ["-l", "--mleft=COLS", Integer, "Left margin"],
  ["-r", "--mright=COLS", Integer, "Right margin"],
  ["-m", "--margin=NUMBER", Integer, "Sets margin for the 4 sides with top & bottom divided by 2", "Side-specific margins have priority on this"],
  ["-c", "--clear", "Clear screen before output"]
].each do |args|
  parser.on(*args)
end

begin
  parser.order!(into: opts) do |argv|
    # This block is yielded only for non-options command line arguments
    # Here argv should be a filepath and happen only once
    raise ArgvErrors::UnknownArg, argv if file
    raise ArgvErrors::FileNotFound, argv unless File.exist?(argv)
    file = argv
  end

  raise ArgvErrors::FileNotProvided unless file
  raise ArgvErrors::CenterWithNoWidth if opts[:align] && !opts[:width]
rescue ArgvErrors::UnknownArg, ArgvErrors::FileNotFound,
  ArgvErrors::FileNotProvided, ArgvErrors::CenterWithNoWidth => e
  puts e.argv_msg
  puts
  puts parser.help
  exit true
rescue OptionParser::InvalidArgument => e
  puts ArgvErrors.msg(e.message)
  puts
  puts parser.help
  exit true
end

Main.new(file, **opts)
